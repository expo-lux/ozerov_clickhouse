---
- name: Python3 install
  hosts: all, !runner
  become: True
  gather_facts: no
    
  tasks:
    - name: initial
      raw: user -e /usr/bin/python3 || ( user -e /usr/bin/yum && yum -y install python3 || apt -y install python3 )

- name: Prepare
  hosts: all, !runner
  become: True
  gather_subset: min
    
  tasks:
    - name: initial
      include_role:
        name: initial

- name: install Clickhouse
  hosts: clickhouse
  become: True
  gather_facts: no

  tasks:

    - name: get my public ip
      become: False
      uri: 
        url: http://icanhazip.com
        return_content: yes
      delegate_to: localhost
      register: my_ip

    - set_fact: public_ip="{{ my_ip['content'] | trim }}"

    - name: block 9000 port for all
      iptables:
        action: append
        chain: INPUT
        in_interface: eth0
        protocol: tcp
        destination_port: "9000"
        jump: DROP

    - name: allow 9000 port for my public IP
      iptables:
        action: insert
        source: "{{ public_ip }}"
        chain: INPUT
        in_interface: eth0
        protocol: tcp
        destination_port: "9000"
        jump: ACCEPT

    - name: 2. Create CA private key
      become: False
      openssl_privatekey:
        size: 2048
        path: ./files/server.key
      tags: cert
      delegate_to: 127.0.0.1

    - name: 2. create the CA CSR
      become: False
      openssl_csr:
        path: ./files/server.csr
        privatekey_path: ./files/server.key
        common_name: "localhost"
        #https://github.com/christianb93/tls-certificates
        #important options https://leftasexercise.com/2020/01/31/understanding-tls-certificates-with-ansible-and-nginx-part-ii/
        key_usage:
            - digitalSignature
            - keyCertSign 
            - cRLSign
        key_usage_critical: yes
        basic_constraints: 
            - CA:TRUE
        basic_constraints_critical: yes
        use_common_name_for_san: false
      tags: cert
      delegate_to: 127.0.0.1

    - name: 2. Create simple self-signed CA certificate
      become: False
      openssl_certificate:
        path: ./files/server.crt
        csr_path: ./files/server.csr
        privatekey_path: ./files/server.key
        provider: selfsigned
      tags: cert
      delegate_to: 127.0.0.1

    - name: 2. Create clickhouse config dir
      file:
        dest: "{{ item }}"
        mode: "ug=rwx,o-rwx"
        state: directory
      loop:
        - "{{ clickhouse_path_configdir }}"
      become: true

    - name: 3. Generate DH Parameters 
      openssl_dhparam:
        path: ./files/dhparam.pem
        size: 4096
      delegate_to: 127.0.0.1
      become: false

    - name: 3. Copy files
      copy:
        dest:  "{{ clickhouse_path_configdir }}/{{ item }}"
        src:  "{{ item }}"
      loop:
        - server.key
        - server.crt
        - dhparam.pem

    - block:
        - name: 1. Install Clickhouse
          include_role:
            name: clickhouse
      ignore_errors: yes

    - name: 1. Set AcceptCertificateHandler in client config
      community.general.xml:
        path: /etc/clickhouse-client/config.xml
        xpath: /config/openSSL/client/invalidCertificateHandler
        pretty_print: yes
        backup: yes
        set_children:
          - name: AcceptCertificateHandler

    - name: 1. Copy config.xml
      copy: 
        remote_src: True 
        src:  "{{ clickhouse_path_configdir }}/config.d/config.xml"
        dest: "{{ clickhouse_path_configdir }}/config.xml"
      
    - name: 1. Remove old config.xml
      file: 
        path: "{{ clickhouse_path_configdir }}/config.d/config.xml"
        state: absent

    - name: 1. Rerun install 
      include_role:
        name: clickhouse

    - name: Test secure connection
      ansible.builtin.shell: clickhouse-client --secure --query="select * from system.databases;"