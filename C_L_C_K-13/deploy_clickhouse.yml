---
- name: install python3
  hosts: all, !runner
  become: True
  gather_facts: no
    
  tasks:
    - name: initial
      raw: user -e /usr/bin/python3 || ( user -e /usr/bin/yum && yum -y install python3 || apt -y install python3 )

- name: initial config
  hosts: all, !runner
  become: True
  gather_subset:
    - min
    - all_ipv4_addresses
    
  tasks:
    - name: initial
      include_role:
        name: initial

- name: install Java
  hosts: java
  become: True
  gather_facts: no

  tasks:
    - name: install java
      include_role: 
        name: java

- name: install Zookeeper
  hosts: zookeeper
  become: True
  gather_facts: no

  tasks:        
    - name: 1. Install Zookeeper on first node
      include_role:
        name: zookeeper        

- name: install Clickhouse
  hosts: clickhouse
  become: True
  gather_facts: no

  tasks:

    - name: Allow access to clickhouse port 9000 only for my public port
      block: 
        - uri: 
            url: http://icanhazip.com
            return_content: yes
          delegate_to: localhost
          register: my_ip
          become: False

        - set_fact: public_ip="{{ my_ip['content'] | trim }}"

        - name: block 9000 port for source IP on WAN interface
          iptables:
            action: append
            chain: INPUT
            in_interface: eth0
            protocol: tcp
            destination_port: "9000"
            jump: DROP

        - name: allow 9000 port for my public IP on WAN interface
          iptables:
            action: insert
            source: "{{ public_ip }}"
            chain: INPUT
            in_interface: eth0
            protocol: tcp
            destination_port: "9000"
            jump: ACCEPT

    - name: 0. Build /etc/hosts file for clickhouse nodes
      lineinfile: 
        dest: /etc/hosts 
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item].ansible_facts.eth1.ipv4.address }} {{ hostvars[item].ansible_fqdn }}"
        state: present
      when: hostvars[item].ansible_default_ipv4.address is defined
      loop: "{{ groups['clickhouse'] }}"

    - name: 0. Install Clickhouse
      block:

        - name: 0. Install Clickhouse
          include_role:
            name: clickhouse

        - name: 0. Copy config.xml
          copy: 
            remote_src: True 
            src:  "{{ clickhouse_path_configdir }}/config.d/config.xml"
            dest: "{{ clickhouse_path_configdir }}/config.xml"
          
        - name: 0. Remove old config.xml
          file: 
            path: "{{ clickhouse_path_configdir }}/config.d/config.xml"
            state: absent

        - name: 0. Remove users.xml in users.d
          file:
            path: "{{  clickhouse_path_configdir }}/users.d/users.xml"
            state: absent

    - name: 0. Prepare files
      copy:
        dest: "{{ item.dest }}"
        src:  "{{ item.file }}"
      loop:
        - {file: queries.sql, dest: /opt/}
        - {file: users.csv, dest: /var/lib/clickhouse/user_files/}

    - name: 1,2,3. Create table local_posts, dict local_users_dict
      ansible.builtin.shell: clickhouse-client --queries-file /opt/queries.sql

    - name: 1,2,3. Generate test data
      ansible.builtin.shell: "(for i in `seq 5`;do  echo $i,title,description,{{ inventory_hostname }},$i,1999-01-01; done) > /opt/data.csv"

    - name: 1,2,3. Insert test data on first node
      ansible.builtin.shell: "clickhouse-client --multiquery --query 'TRUNCATE TABLE local_posts; INSERT INTO local_posts FORMAT CSV' < /opt/data.csv"
      when: inventory_hostname == groups['clickhouse'][0]

    - name: 3. check local_users_dict status
      ansible.builtin.shell: "clickhouse-client --query \"select status from system.dictionaries where name='local_users_dict'\""
      register: cnt
      failed_when: cnt.stdout != 'LOADED'

    - name: 3. check local_users_dict records count
      ansible.builtin.shell: "clickhouse-client --query \"select count() from dictionary('local_users_dict')\""
      register: cnt
      failed_when: cnt.stdout != '2'

    - name: 4. check user_id -> email replacement
      ansible.builtin.shell: "clickhouse-client --query \"select dictGetString('local_users_dict','email',user_id) as email  from local_posts where user_id=2;\""
      register: res
      failed_when: res.stdout != 'jbezos@gmail.com'
