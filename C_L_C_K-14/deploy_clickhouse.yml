---
- name: install python3
  hosts: all, !runner
  become: True
  gather_facts: no
    
  tasks:
    - name: initial
      raw: user -e /usr/bin/python3 || ( user -e /usr/bin/yum && yum -y install python3 || apt -y install python3 )

- name: initial config
  hosts: all, !runner
  become: True
  gather_subset:
    - min
    - all_ipv4_addresses
    
  tasks:
    - name: initial
      include_role:
        name: initial

- name: install Java
  hosts: java
  become: True
  gather_facts: no

  tasks:
    - name: install java
      include_role: 
        name: java

- name: install Zookeeper
  hosts: zookeeper
  become: True
  gather_facts: no

  tasks:        
    - name: 1. Install Zookeeper on first node
      include_role:
        name: zookeeper        

- name: install Clickhouse
  hosts: clickhouse
  become: True
  gather_facts: no
  vars:
    date_partition: "2020-10-10"

  tasks:

    - name: Allow access to clickhouse port 9000 only for my public port
      block: 
        - uri: 
            url: http://icanhazip.com
            return_content: yes
          delegate_to: localhost
          register: my_ip
          become: False

        - set_fact: public_ip="{{ my_ip['content'] | trim }}"

        - name: block 9000 port for source IP on WAN interface
          iptables:
            action: append
            chain: INPUT
            in_interface: eth0
            protocol: tcp
            destination_port: "9000"
            jump: DROP

        - name: allow 9000 port for my public IP on WAN interface
          iptables:
            action: insert
            source: "{{ public_ip }}"
            chain: INPUT
            in_interface: eth0
            protocol: tcp
            destination_port: "9000"
            jump: ACCEPT

    - name: 0. Build /etc/hosts file for clickhouse nodes
      lineinfile: 
        dest: /etc/hosts 
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item].ansible_facts.eth1.ipv4.address }} {{ hostvars[item].ansible_fqdn }}"
        state: present
      when: hostvars[item].ansible_default_ipv4.address is defined
      loop: "{{ groups['clickhouse'] }}"

    - name: 0. Install Clickhouse
      block:

        - name: 0. Install Clickhouse
          include_role:
            name: clickhouse

        - name: 0. Copy config.xml
          copy: 
            remote_src: True 
            src:  "{{ clickhouse_path_configdir }}/config.d/config.xml"
            dest: "{{ clickhouse_path_configdir }}/config.xml"
          
        - name: 0. Remove old config.xml
          file: 
            path: "{{ clickhouse_path_configdir }}/config.d/config.xml"
            state: absent

        - name: 0. Remove users.xml in users.d
          file:
            path: "{{  clickhouse_path_configdir }}/users.d/users.xml"
            state: absent

    - name: 0. Prepare files
      copy:
        dest: "{{ item.dest }}"
        src:  "{{ item.file }}"
      loop:
        - {file: queries.sql, dest: /opt/}

    - name: 1,2. Create table db.local_posts
      ansible.builtin.shell: clickhouse-client --queries-file /opt/queries.sql

    - name: 3. Generate test data
      ansible.builtin.shell: "(for i in `seq 10`;do  echo $i,title,description,{{ inventory_hostname }},{{ date_partition }}; done) > /opt/data.csv"
      tags: gen

    - name: 3. Insert test data in db.local_posts
      ansible.builtin.shell: "clickhouse-client --multiquery --query 'TRUNCATE TABLE db.local_data; INSERT INTO db.local_data FORMAT CSV' < /opt/data.csv"
      tags: gen

    - name: 3. Check records in db.local_data
      ansible.builtin.shell: "clickhouse-client --query 'SELECT count() FROM db.local_data'"
      register: cnt
      failed_when: (cnt.stdout | int) != 10

    - name: 4,5. Backup table db.local_data to /opt/ch for metadata and /opt/ch/backups for data
      block: 
        - name: Create directory for backup
          file:
            path: /opt/ch/backups
            state: directory
            owner:  clickhouse
            group:  clickhouse

        - name: find out partition
          ansible.builtin.shell: "clickhouse-client --query \"SELECT partition FROM system.parts WHERE active AND database = 'db'\""
          register: parts

        - debug: msg="{{ parts.stdout }}"

        - ansible.builtin.shell: "clickhouse-client --query \"ALTER TABLE db.local_data FREEZE PARTITION '{{ parts.stdout }}'\""

        - name: copy metadata to /opt/ch
          copy:
            dest: /opt/ch
            src:  /var/lib/clickhouse/metadata/db/local_data.sql
            remote_src: True

        - set_fact: date_pattern="{{ date_partition | regex_replace('-') + '*' }}"
          tags: debug

        - debug: msg="{{ date_pattern }}"
          tags: debug

        - find: 
            paths: "/var/lib/clickhouse/shadow/"
            recurse: yes 
            patterns: "{{ date_pattern }}"
            file_type: directory
          register: dir_to_copy
          tags: find

        - debug: msg="{{ dir_to_copy.files[0].path }}"
          tags: find

        - name: copy backup to /opt/ch/backups
          copy:
            remote_src: True
            src: "{{ dir_to_copy.files[0].path }}"
            dest: /opt/ch/backups/
          tags: find

    - name: 6,7,8. Restore data to db_restore.local_data
      block:

        - name: replace first line in metadata file
          ansible.builtin.lineinfile:
            path: /opt/ch/local_data.sql
            regexp: '^ATTACH TABLE'
            line: CREATE TABLE IF NOT EXISTS local_data

        - name: restore metadata to db_restore
          ansible.builtin.shell: clickhouse-client --database db_restore --queries-file /opt/ch/local_data.sql

        - name: copy backup
          copy:
            remote_src: True
            src: /opt/ch/backups/
            dest: /var/lib/clickhouse/data/db_restore/local_data/detached/
            owner: clickhouse
            group: clickhouse
          tags: find

        - ansible.builtin.shell: "clickhouse-client --query \"ALTER TABLE db_restore.local_data ATTACH PARTITION '{{ date_partition }}'\""

    - name: Check records in db_restore.local_data
      ansible.builtin.shell: "clickhouse-client --query 'SELECT count() FROM db_restore.local_data'"
      register: cnt
      failed_when: (cnt.stdout | int) != 10