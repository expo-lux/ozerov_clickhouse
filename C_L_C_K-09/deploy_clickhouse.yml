---
- name: Python3 install
  hosts: all, !runner
  become: True
  gather_facts: no
    
  tasks:
    - name: initial
      raw: user -e /usr/bin/python3 || ( user -e /usr/bin/yum && yum -y install python3 || apt -y install python3 )

- name: Prepare
  hosts: all, !runner
  become: True
  gather_subset: min
    
  tasks:
    - name: initial
      include_role:
        name: initial

- name: install Clickhouse
  hosts: clickhouse
  become: True
  gather_facts: no

  tasks:

    - name: get my public ip
      become: False
      uri: 
        url: http://icanhazip.com
        return_content: yes
      delegate_to: localhost
      register: my_ip

    - set_fact: public_ip="{{ my_ip['content'] | trim }}"

    - name: block 9000 port for source IP on WAN interface
      iptables:
        action: append
        chain: INPUT
        in_interface: eth0
        protocol: tcp
        destination_port: "9000"
        jump: DROP

    - name: allow 9000 port for my public IP on WAN interface
      iptables:
        action: insert
        source: "{{ public_ip }}"
        chain: INPUT
        in_interface: eth0
        protocol: tcp
        destination_port: "9000"
        jump: ACCEPT
 
    - name: 1. Install Clickhouse
      include_role:
        name: clickhouse

    - name: 1. Copy config.xml
      copy: 
        remote_src: True 
        src:  "{{ clickhouse_path_configdir }}/config.d/config.xml"
        dest: "{{ clickhouse_path_configdir }}/config.xml"
      
    - name: 1. Remove old config.xml
      file: 
        path: "{{ clickhouse_path_configdir }}/config.d/config.xml"
        state: absent

    - name: 1. Remove users.xml in users.d
      file:
        path: "{{  clickhouse_path_configdir }}/users.d/users.xml"
        state: absent
    
    - name: 3. Generate/etc/clickhouse-server/cluster.xml config
      template:
        src: remote_servers.j2
        dest: "{{ clickhouse_path_configdir }}/cluster.xml"
        owner: "{{ clickhouse_user | default('clickhouse') }}"
        group: "{{ clickhouse_group | default('clickhouse') }}"
        mode: "ug=rw,o-rwx"
      become: true
      vars:
        clickhouse_clusters:
          local:
            shard_1:
                - { host: "10.110.0.3", port: 9000 }
            shard_2:
                - { host: "10.110.0.2", port: 9000 }
  
    - name: 2. include /etc/clickhouse-server/cluster.xml in /etc/clickhouse-server/config.xml
      community.general.xml:
        path: /etc/clickhouse-server/config.xml
        xpath: /clickhouse/include_from
        pretty_print: yes
        backup: yes
        value: /etc/clickhouse-server/cluster.xml

    - name: 2. restart service 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: clickhouse-server

    - name: 2. Wait for Clickhouse Server to Become Ready (check http 8123 port)
      wait_for:
        port: "8123"
        delay: "1"
        timeout: "30"

    - name: 4. copy queries.sql
      copy:
        dest: /opt
        src:  queries.sql

    - name: 4. create tables ch_local, ch_distributed
      ansible.builtin.shell: clickhouse-client --queries-file /opt/queries.sql

    - name: 4. generate data
      ansible.builtin.shell: "(for i in `seq 5`;do  echo $i,title,description,{{ inventory_hostname }},1999-01-01; done) > /opt/data.csv"

    - name: 5. insert test data
      ansible.builtin.shell: "clickhouse-client --multiquery --query 'TRUNCATE TABLE ch_local; INSERT INTO ch_local FORMAT CSV' < /opt/data.csv"

    - name: 5. count records in sharded table 
      ansible.builtin.shell: "clickhouse-client --query 'select count(*) from default.ch_distributed'"
      register: cnt
      failed_when: (cnt.stdout | int) != 10

    - name: 5. Test metrics page
      ansible.builtin.uri:
        url: http://localhost:9363/metrics